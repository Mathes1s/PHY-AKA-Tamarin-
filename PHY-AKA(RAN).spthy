theory PHY_aka
/*
  Protocol:       5G PHY-AKA
  Authors:      	Makai
  Date: 	        DEC 2020
  Based on:       Security Architecture and Procedures for 5G System: 3GPP TS 33.501 V15.0.0(5G AKA)
  Comments:       This theory models 5G AKA including:
      - the resynchronization mechanism
      - the XOR
      - SUPI concealement (SUCI)
      - PHY key
      Not included:
      - the sequence number
      - AMF (authentication management field)
  Notations:  
      supi  ->  Subscription Permanent Identifier (IMSI).
      suci  ->  Subscription Concealed Identifier.
      sqn     ->      Sequence Number

      UE  ->  User Equipment.
      SEAF  ->  Security Anchor Function.
      AUSF  ->  Authentication Server Function.
      ARPF  ->  Authentication Repository and Processing Function.
      HSS   ->  Home Subscription Server (AUSF + ARPF)

      SNID  ->  Visited Public Land Mobile Network ID (VPLMN-Id) of the serving network, appended to string '5G'.
      HN  ->  Home network including AUSF and ARPF.
      SN  ->  Serving network.
  Channels:  UE <-> SEAF .<->. HSS  [.<->. is authenticated, confidential, replay protected, order-preserving, binding]
  Terms:  
    Assumptions:
      SNid -> ~idSN, output when created (public fresh constant)
      supi -> ~supi (fresh value)
      ~R1 ~R2 are freshly generated and unique.
      HNMAC = f1(k, <R1, AMF>)
      XRES = f2(k, R1)
      CK = f3(k, R1)
      IK = f4(k, R1)
      AK = f5(k, R1)
      AUTN = <XOR(R2, AK), AMF, HNMAC>
      SNID = <'5G', VPLMNID>
      K_ausf = KDF(<CK, IK>, <SNID, XOR(Sqn, AK)>) 
      K_seaf = KDF(K_ausf, SNID) ([5G] A.6)
      XRES* = KDF(<CK, IK>, <SNID, XRES, RAND>) 
      HXRES* = SHA256(<XRES*, RAND>) 
      pk_HSS, sk_HSS (asymmetric key pair of HSS)
      id_pk_HSS (identifier for pk_HSS)
      ~RAND (freshly generated randomness)
      SUCI = < aenc(<SUPI, ~RAND>, pk_HSS), HN, id_pk_HSS >
     
   Functions: 
      f1 is a message authentication function.
      f2 is a (possibly truncated) message authentication function.
      f3 and f4 are key generating functions.
      f5 is a key generating function or f5 = 0.

      KDF as used in 5G is defined in TS 33.220.
      It is used for K_ausf, K_seaf, and RES*.

  Pre-shared
   secrets: Symmetric subscription key:   (UE, HSS, ~k)
    

  Protocol Model:
     1. UE   -> SEAF:  suci
     2. SEAF -> HSS:   suci, SNID
     3. HSS -> SEAF:   R1,R2, HXRES*, K_seaf, AUTN
     4. SEAF -> UE  :  R1, AUTN, SNMAC
     5. UE   -> SEAF:  RES*
     6. SEAF -> HSS:   RES*, suci, SNID
     7. HSS -> SEAF:   'confirm', supi
*/

begin

builtins:
  asymmetric-encryption, multiset, xor

functions:
  f1/2,      // MAC-function --> MAC
  f2/2,      // MAC-function --> RES
  f3/2,      // KDF          --> CK
  f4/2,      // KDF          --> IK
  f5/2,      // KDF          --> AK (Hide Sqn)
  KDF/2,     // KDF          --> K_ausf, K_seaf, XRES*
  PKDF/1,    // KDF          --> K_phy
  SHA256/2   // KDF          --> HXRES*


/************************************/
/*        Security Channel          */
/************************************/

rule send_secure:
  [SndS(A,B,m)]  
  -->
  [Sec(A,B,m)]

rule receive_secure:
  [Sec(A,B,m)]
  -->
  [RcvS(A,B,m)]

rule secureChannel_compromised_in:
  [In(<A,B,x>)]
  --[
  	Rev(A,'secureChannel'),
  	Injected(x)
  ]->
  [Sec(A,B,x)]

rule secureChannel_compromised_out:
  [Sec(A,B,m)]
  --[Rev(B,'secureChannel')]->
  [Out(m)]


/************************************/
/*     Initialization Rules         */
/************************************/

// Initialize a serving network
rule init_servNet:
  let 
    SNID = <'5G', ~idSN>
  in
  [ Fr(~idSN) ] // idSN denotes VPLMNID
  --[ ServNet(~idSN) ]->
  [!SEAF(~idSN, SNID),
    Out(SNID)]

// Initialize a RAN
rule init_RAN:
  [ Fr(~idRAN) ] 
  --[ RANinit(~idRAN) ]->
  [!RAN(~idRAN),
    Out(~idRAN)]

// Initialize a home network
rule init_homeNet:
  [Fr(~sk_HN),
    Fr(~idHN)]
  --[ HomeNet(~idHN) ]->
  [!HSS(~idHN, ~sk_HN),
   !Pk(~idHN, pk(~sk_HN)),
   Out(<~idHN, pk(~sk_HN)>)]

// Initialize the RAN-SEAF link
rule add_rslink:
  [!SEAF(~idSN, SNID),
   !RAN(~idRAN)]
  --[
    LinkRAN(~idSN, SNID,~idRAN)
  ]->
  [!Link_RAN(~idSN, SNID,~idRAN)]

// Initialize the subscription
rule add_subscription:
  [Fr(~supi),
   Fr(~k),
   !HSS(~idHN, ~sk_HN)]
  --[
    Subscribe(~supi, ~idHN)
  ]->
  [!Ltk_Sym(~supi, ~idHN, ~k)]


/************************************/
/*         Key Leakage              */
/************************************/

// Compromised subscriptions (symmetric key k)
rule reveal_Ltk_Sym:
  [!Ltk_Sym(~supi, ~idHN, ~k)]
  --[
    // Security properties
    Rev(~supi, <'k', ~k>),
    Rev(~idHN, <'k', ~k>)
  ]->
  [Out(~k)]


// Compromised subscriptions (identifier supi)
rule reveal_Ltk_supi:
  [!Ltk_Sym(~supi, ~idHN, ~k)]
  --[
    // Security properties
    Rev(~supi, <'supi', ~supi>),
    Rev(~idHN, <'supi', ~supi>)
  ]->
  [Out(~supi)]

// Compromised home network (private asymmetric key sk_HN)
rule reveal_sk_HN:
  [!HSS(~idHN, ~sk_HN)]
  --[
    // Security properties
    Rev(~idHN, <'skHN', ~sk_HN>)
  ]->
  [Out(~sk_HN)]


/************************************/
/*    Initiation of authentication  */
/************************************/
// Attach Request
rule ue_send_attachReq:
  let
    suci = < aenc{<~supi, ~R>}pk_HN, ~idHN>
  in
  [!Ltk_Sym(~supi, ~idHN, ~k),
   !Pk(~idHN, pk_HN),
   Fr(~tid),
   Fr(~R)]
  --[
    // Executability
    Start_UE_Session(~supi)
  ]->
  [St_0_UE(~tid, ~supi, suci, ~idHN, ~k),
   Out(suci)]

// RAN Attach Request + Authentication Initiation Request (AIR1)
rule ran_receive_attachReq_send_air1:
  let
    suci = <conc_supi, idHN>
    msg = <suci, ~csi>
  in
  [In(suci),
   !Link_RAN(~idSN, SNID, ~idRAN),
   Fr(~csi),
   Fr(~tid)
   ]
  --[]->
  [St_1_RAN(~tid, conc_supi, idHN, ~csi),
   SndS(~idRAN,~idSN, msg),
   SndS(~idRAN, suci, ~csi)
   ]

// pythical information
rule ue_csi_info:
   [St_0_UE(~tid, ~supi, suci, ~idHN, ~k),
    RcvS(~idRAN, suci, csi)
   ]
  --[]->
   [St_1_UE(~tid, ~supi, suci, ~idHN, ~k,csi)]

// SEAF Attach Request + Authentication Initiation Request (AIR2)
rule seaf_receive_attachReq_send_air2:
  let
    suci = <conc_supi,  idHN>
    msg = <suci, SNID>
  in
  [!Link_RAN(~idSN, SNID, ~idRAN),
   RcvS(~idRAN,~idSN, <suci, csi>),
   Fr(~tid)
   ]
  --[
    // Executability
    Start_SEAF_Session(~idSN)
  ]->
  [St_1_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, csi),
   SndS(~idSN, idHN, <'air', msg>)
   ]
/************************************/
/*       authentication Rules       */
/************************************/



// Authentication Initiation Request (AIR) + 5G Authentication Initiation Answer (5G-AIA)
rule hss_receive_air_send_aia:
  let
    // 1. Receive
    conc_supi = aenc{<~supi, ~R>}pk(~sk_HN)
    suci = <conc_supi, ~idHN>
    SNID = <'5G', idSN> // HSS checks that the received SNID matches the authenticated channel with idSN
    msgIn = <suci, SNID >
    
    // 2. Send
    //     a. ARPF part
    HNMAC = f1(~k, ~R1)
    XRES = f2(~k, ~R1)
    CK = f3(~k, ~R1)
    IK = f4(~k, ~R1)
    AK = f5(~k, ~R1)
    AUTN = <~R2 XOR AK, HNMAC>
    K_seaf = KDF(KDF(<CK, IK>, <SNID, ~R2 XOR AK>), SNID)
    XRES_star = KDF(<CK, IK>, <SNID, XRES, ~R1>)

    //     b. AUSF part
    HXRES_star = SHA256(XRES_star, ~R1)
    5G_AV = < ~R1,~R2, HXRES_star, K_seaf, AUTN >
    msgOut = 5G_AV
  in 
  [!HSS(~idHN, ~sk_HN),
   RcvS(idSN, ~idHN, <'air', msgIn>),
   !Ltk_Sym(~supi, ~idHN, ~k),
   Fr(~R1),
   Fr(~R2),
   Fr(~tid)]
  --[
    // Open chains
    Src(~R1, AUTN),
    // Helping
    KSEAF(K_seaf),
    // Executability
    Start_HSS_Session(~idHN),
    HSS_Send_Aia(),

    // Security properties
    Running(~idHN, idSN,<'SEAF','HSS',<'K_seaf', K_seaf>>),
    Running(~idHN, idSN,<'SEAF','HSS',<'supi', ~supi>>),
    Running(~idHN, idSN,<'SEAF','HSS',<'RES_star', XRES_star>>),
    Running(~idHN, ~supi,<'UE','HSS', <'K_seaf', K_seaf>>),
    Running(~idHN, ~supi,<'UE','HSS',<'supi', ~supi>>),
    Running(~idHN, ~supi,<'UE','HSS',<'AUTN', AUTN>>),
    Honest(~supi),
    Honest(~idHN),
    Honest(idSN)
  ]->
  [St_1_HSS(~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, XRES_star, ~R1, ~R2, ~sk_HN),
   SndS( ~idHN, idSN, <'aia', msgOut>)]

// 5G Authentication Initiation Answer (5G-AIA) + Authentication Request (Auth-Req)
rule seaf_receive_aia_send_authReq:
	let
		suci = <conc_supi,  idHN>
		5G_AV = < R1, R2, HXRES_star, K_seaf, AUTN >
		msgIn = 5G_AV
		K_phy = PKDF(csi)
		SNMAC = f1(K_phy,R2)
    msgOut = < R1, R2, AUTN, SNID, SNMAC >
  in
	[St_1_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, csi),
	 RcvS(idHN, ~idSN, <'aia', msgIn>)]
	--[
		// Open chains
		Out_Src(R1, AUTN),
		Running(~idSN, idHN, <'HSS','SEAF', <'K_seaf', K_seaf>>),
		Running(~idSN, suci, <'UE','SEAF', <'SNMAC', SNMAC>>)
	]->
	[St_2_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, R1, R2, HXRES_star, K_seaf),
	 Out(msgOut)]

// Authentication Request (Auth-Req) + Authentication Response (Auth-Resp)
rule ue_receive_success_send_authResp:
	let
		AK = f5(~k, RAND)
		K_phy = PKDF(csi)
		SNMAC = f1(csi, R2)
		HNMAC = f1(~k, R1) 
		AUTN = <R2 XOR AK, HNMAC>
		SNID = <'5G', idSN>
		msgIn = < R1, AUTN, SNID >
		// Output
		RES = f2(~k, R1)
		IK = f4(~k, R1)
		CK = f3(~k, R1)
		RES_star = KDF(<CK, IK>, <SNID, RES, R1>)
		K_seaf = KDF(KDF(<CK, IK>, <SNID, R2 XOR AK>), SNID)
		msgOut = RES_star
	in
	[St_1_UE(~tid, ~supi, suci, ~idHN, ~k, csi),
	 In(msgIn)
	]
	--[
		// Security properties
		Running(~supi, idSN,<'SEAF','UE',<'RES_star', RES_star>>),
		Running(~supi, idSN,<'SEAF','UE',<'K_seaf', K_seaf>>),
		Running(~supi, idSN,<'SEAF','UE',<'supi', ~supi>>),
		Running(~supi, ~idHN, <'HSS','UE', <'K_seaf', K_seaf>>),
		Running(~supi, ~idHN, <'HSS','UE', <'snname', idSN>>),
		Running(~supi, ~idHN, <'HSS','UE', <'supi', ~supi>>),
		Running(~supi, ~idHN, <'HSS','UE', <'RAND', RAND>>),
		Secret(<'UE', ~supi>, 'key', K_seaf),
		Secret(<'UE', ~supi>, 'supi', ~supi),
		Secret(<'UE', ~supi>, 'k', ~k),
		Commit(~supi, ~idHN, <'UE','HSS',<'AUTN', AUTN>>),		
		Commit(~supi, ~idHN, <'UE','HSS',<'supi', ~supi>>),
		Commit(~supi, ~idHN, <'UE','HSS', <'snname', idSN>>),
		Commit(~supi, ~idHN, <'UE','HSS', <'K_seaf', K_seaf>>),
		Commit(suci, idSN, <'UE','SEAF',<'SNMAC', SNMAC>>),
		Commit(~supi, idSN, <'UE','SEAF',<'K_seaf', K_seaf>>),
		Honest(~supi),
		Honest(~idHN),
		Honest(idSN)		
	]->
	[St_2_UE(~tid, ~supi, ~idHN, ~k, idSN, K_seaf),
	 Out(msgOut)]

rule seaf_receive_authResp_send_ac:
	let
		HXRES_star = SHA256(RES_star, R1)
		suci = <conc_supi,  idHN>
		msgOut = < RES_star, suci, SNID >
	in
	[St_2_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, R1, R2, HXRES_star, K_seaf),
	 In(RES_star)]
	--[
		// Security properties
		Running(~idSN, idHN, <'HSS','SEAF', <'RES_star', RES_star>>)
	]->
	[St_3_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, R1,R2, RES_star, K_seaf),
	SndS(~idSN, idHN, <'ac', msgOut>)]


rule hss_receive_ac_send_aca:
	let
		SNID = <'5G', idSN>
		CK = f3(~k, ~R1)
		IK = f4(~k, ~R1)
		AK = f5(~k, ~R1)
		K_seaf = KDF(KDF(<CK, IK>, <SNID, ~R2 XOR AK>), SNID)
		msgIn = < XRES_star, suci, SNID >

		msgOut = <'confirm', ~supi>
	in
	[St_1_HSS(~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, XRES_star, ~R1, ~R2, ~sk_HN),
	 RcvS(idSN, ~idHN, <'ac',msgIn>)]
	--[
		// Executability
		HSS_End(),

		// Security properties
		Secret(<'HSS', ~idHN>, 'key', K_seaf),
		Secret(<'HSS', ~idHN>, 'supi', ~supi),
		Secret(<'HSS', ~idHN>, 'k', ~k),
		Commit(~idHN, idSN, <'HSS','SEAF', <'K_seaf', K_seaf>>),
		Commit(~idHN, idSN, <'HSS','SEAF', <'supi', ~supi>>),
		Commit(~idHN, idSN, <'HSS','SEAF', <'RES_star', XRES_star>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'K_seaf', K_seaf>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'snname', idSN>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'supi', ~supi>>),
		Honest(~idHN),
		Honest(~supi),
		Honest(idSN)
	]->
	[SndS(~idHN, idSN, <'aca', msgOut>)]


// Authentication Confirmation Answer (5G-ACA)
rule seaf_receive_aca:
    let
		SNID = <'5G', ~idSN>
		msgIn = <'confirm', supi>
	in
    [St_3_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, ~R1, ~R2, RES_star, K_seaf),
	 RcvS(idHN, ~idSN, <'aca', msgIn>)]
	--[
		// Executability
		SEAF_End(),

		// Security properties
		Running(~idSN, supi,<'UE','SEAF',<'K_seaf', K_seaf>>),
		Running(~idSN, idHN,<'HSS','SEAF',<'supi', supi>>),
		Secret(<'SEAF', ~idSN>, 'key', K_seaf),
		Secret(<'SEAF', ~idSN>, 'supi', supi),
		Commit(~idSN, idHN, <'SEAF','HSS', <'K_seaf', K_seaf>>),
		Commit(~idSN, idHN, <'SEAF','HSS', <'supi', supi>>),
		Commit(~idSN, idHN, <'SEAF','HSS', <'RES_star', RES_star>>),
		Commit(~idSN, supi, <'SEAF','UE', <'K_seaf', K_seaf>>),
		Commit(~idSN, supi, <'SEAF','UE', <'supi', supi>>),
		Commit(~idSN, supi, <'SEAF','UE', <'RES_star', RES_star>>),
		Honest(supi),
		Honest(idHN),
		Honest(~idSN)
	]->
	[] 


/************************************/
/*     Restrictions / Axioms        */
/************************************/

restriction subscribe_once:
	" All HN1 HN2 supi #i #j. Subscribe(supi, HN1)@i & Subscribe(supi, HN2)@j ==> (#i = #j & HN1 = HN2)"

// Dummy lemma for timing info only.
lemma dummy: "not(F)"

/************************************/
/*         Sources lemmas           */
/************************************/

// proof (automatic) (~1 sec)
lemma rand_autn_src [sources]:
  	" All RAND AUTN #i. Out_Src(RAND, AUTN)@i
		==> (Ex #j. Src(RAND, AUTN)@j & j < i)
		    | (Ex #j x1 x2. Injected(<'aia', <RAND, x1, x2, AUTN>>)@j & j < i) "

/************************************/
/*     Executability lemmas         */
/************************************/

// This lemma shows a normal execution .
// proof (automatic) (~20 sec)
lemma executability_honest:
	exists-trace
	" Ex #i. SEAF_End()@i
		& not (Ex X data #r. Rev(X,data)@r)
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All S1 S2 HN1 HN2 #j #k. Subscribe(S1, HN1)@j &
					    Subscribe(S2, HN2)@k ==> #j = #k)
		& (All SNID1 SNID2 #j #k. Start_SEAF_Session(SNID1)@j &
				          Start_SEAF_Session(SNID2)@k ==> #j = #k) 
		& (All UE1 UE2 #j #k. Start_UE_Session(UE1)@j &
				          Start_UE_Session(UE2)@k ==> #j = #k) 
		& (All HN1 HN2 #j #k. Start_HSS_Session(HN1)@j &
				      Start_HSS_Session(HN2)@k ==> #j = #k)"


/********************************************/
/*          Agreement UE -> HSS             */
/********************************************/

// attack 
lemma weakagreement_ue_hss_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev :
	" All a b t #i. Commit(a,b,<'UE','HSS',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
			| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i)
			| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
      | (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "


// attack (stored)
lemma cleanAttack_injectiveagreement_ue_hss_supi_noRev :
	" All a b t #i.
		( Commit(a,b,<'UE','HSS',<'supi', t>>)@i &
		 (All UE1 UE2 UE3 #j #k #l. Start_UE_Session(UE1)@j &
			         Start_UE_Session(UE2)@k &
			         Start_UE_Session(UE3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)) &
		 (All HN1 HN2 HN3 #j #k #l. Start_HSS_Session(HN1)@j &
			         Start_HSS_Session(HN2)@k &
			         Start_HSS_Session(HN3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)))
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'supi', t>>)@j 
        	     & j < i
        	     & not (Ex a2 b2 #i2. Commit(a2,b2,<'UE','HSS',<'supi', t>>)@i2
                           	& not (#i2 = #i)))
             	| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma noninjectiveagreement_ue_hss_supi_noKeyRev :
	" All a b t #i. Commit(a,b,<'UE','HSS',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'supi', t>>)@j)
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

// attack (stored)
lemma noninjectiveagreement_ue_hss_kseaf_noRev :
	" All a b t #i. Commit(a,b,<'UE','HSS',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'K_seaf', t>>)@j)
             	| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "

// attack (stored)
lemma noninjectiveagreement_ue_hss_snname_noRev :
	" All a b t #i. Commit(a,b,<'UE','HSS',<'snname', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'snname', t>>)@j)
             	| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "


/********************************************/
/*          Agreement SEAF -> UE            */
/********************************************/

// attack (stored)
lemma noninjectiveagreement_seaf_ue_kseaf_noRev :
	" All a b t #i. Commit(a,b,<'SEAF','UE',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','UE',<'K_seaf', t>>)@j)
             	| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "

// attack (stored)
lemma cleanAttack_injectiveagreement_seaf_ue_supi_noRev :
	" All a b t #i. 
		(Commit(a,b,<'SEAF','UE',<'supi', t>>)@i &
		(All UE1 UE2 UE3 #j #k #l. Start_UE_Session(UE1)@j &
			         Start_UE_Session(UE2)@k &
			         Start_UE_Session(UE3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)) &
		 (All HN1 HN2 HN3 #j #k #l. Start_HSS_Session(HN1)@j &
			         Start_HSS_Session(HN2)@k &
			         Start_HSS_Session(HN3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)))
    		==> (Ex #j. Running(b,a,<'SEAF','UE',<'supi', t>>)@j 
        	     & j < i
        	     & not (Ex a2 b2 #i2. Commit(a2,b2,<'SEAF','UE',<'supi', t>>)@i2
                           	& not (#i2 = #i)))
             	| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma noninjectiveagreement_seaf_ue_supi_noKeyRev_noChanRev :
	" All a b t #i. Commit(a,b,<'SEAF','UE',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','UE',<'supi', t>>)@j)
            | (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
			| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i)  "

// attack (stored)
lemma weakagreement_seaf_ue_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev :
	" All a b t #i. Commit(a,b,<'SEAF','UE',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
			| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
			| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
			| (Ex X s #r. Rev(X, <'sqn',s>)@r & Honest(X)@i)
        	| (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "

// attack (stored)
lemma weakagreement_seaf_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev :
	" All a b t #i. Commit(a,b,<'SEAF','UE',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
			| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i)
			| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
			| (Ex X s #r. Rev(X, <'sqn',s>)@r & Honest(X)@i)
        	| (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma weakagreement_seaf_ue_noKeyRev_noChanRev :
	" All a b t #i. Commit(a,b,<'SEAF','UE',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
			| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
			| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i) "


/********************************************/
/*          Agreement SEAF -> HSS           */
/********************************************/

// attack (automatic) (~10 sec)
lemma weakagreement_seaf_hss_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev:
	" All a b t #i. Commit(a,b,<'SEAF','HSS',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
			| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
			| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
			| (Ex X s #r. Rev(X, <'sqn',s>)@r & Honest(X)@i)
        	| (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma noninjectiveagreement_seaf_hss_kseaf_noChanRev :
	" All a b t #i. Commit(a,b,<'SEAF','HSS',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','HSS',<'K_seaf', t>>)@j)
				| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i) "

// attack (stored)
lemma injectiveagreement_seaf_hss_kseaf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev :
	" All a b t #i. Commit(a,b,<'SEAF','HSS',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','HSS',<'K_seaf', t>>)@j 
        	    & j < i
        	    & not (Ex a2 b2 #i2. Commit(a2,b2,<'SEAF','HSS',<'K_seaf', t>>)@i2
                & not (#i2 = #i))) 
				| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i)
				| (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i)
				| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma injectiveagreement_seaf_hss_kseaf_noKeyRev_noChanRev :
	" All a b t #i. Commit(a,b,<'SEAF','HSS',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','HSS',<'K_seaf', t>>)@j 
        	    & j < i
        	    & not (Ex a2 b2 #i2. Commit(a2,b2,<'SEAF','HSS',<'K_seaf', t>>)@i2
                & not (#i2 = #i)))
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
				| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma noninjectiveagreement_seaf_hss_supi_noChanRev:
	" All a b t #i. Commit(a,b,<'SEAF','HSS',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','HSS',<'supi', t>>)@j)
				| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i) "


/********************************/
/*     Agreement HSS -> UE      */
/********************************/

// proof (automatic) (~1 min)
lemma injectiveagreement_hss_ue_kseaf_noKeyRev :
	" All a b t #i. Commit(a,b,<'HSS','UE',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'HSS','UE',<'K_seaf', t>>)@j 
        	    & j < i
        	    & not (Ex a2 b2 #i2. Commit(a2,b2,<'HSS','UE',<'K_seaf', t>>)@i2
                & not (#i2 = #i)))
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

// attack (stored)
lemma weakagreement_hss_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev :
	" All a b t #i. Commit(a,b,<'HSS','UE',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
		| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i)
		| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
        | (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "

// proof (automatic) (~10 sec)
lemma noninjectiveagreement_hss_ue_supi_noKeyRev :
	" All a b t #i. Commit(a,b,<'HSS','UE',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'HSS','UE',<'supi', t>>)@j)
				| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

// proof (automatic) (~1 sec)
lemma noninjectiveagreement_hss_ue_snname_noKeyRev:
	" All a b t #i. Commit(a,b,<'HSS','UE',<'snname', t>>)@i
    		==> (Ex #j. Running(b,a,<'HSS','UE',<'snname', t>>)@j)
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

/********************************/
/*     Agreement HSS -> SEAF    */
/********************************/

// proof (automatic) (~1 sec)
lemma injectiveagreement_hss_seaf_kseaf_noChanRev :
	" All a b t #i. Commit(a,b,<'HSS','SEAF',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'HSS','SEAF',<'K_seaf', t>>)@j 
        	    & j < i
        	    & not (Ex a2 b2 #i2. Commit(a2,b2,<'HSS','SEAF',<'K_seaf', t>>)@i2
                & not (#i2 = #i))) 
				| (Ex X #r. Rev(X, 'secureChannel')@r & Honest(X)@i) "

// attack (stored)
lemma weakagreement_hss_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev :
	" All a b t #i. Commit(a,b,<'HSS','SEAF',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
		| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i)
		| (Ex X k #r. Rev(X, <'skHN',k>)@r & Honest(X)@i)
        | (Ex X s #r. Rev(X, <'supi',s>)@r & Honest(X)@i) "

// attack (stored)
lemma noninjectiveagreement_hss_seaf_supi_noRev :
	" All a b t #i. Commit(a,b,<'HSS','SEAF',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'HSS','SEAF',<'supi', t>>)@j)
				| (Ex X data #r. Rev(X,data)@r & Honest(X)@i) "

end
